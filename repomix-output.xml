This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
resources/
  asc_logo.svg
src/
  test/
    extension.test.ts
  AiderContextViewProvider.ts
  AiderSessionManager.ts
  extension.ts
.gitignore
.vscode-test.mjs
.vscodeignore
CHANGELOG.md
eslint.config.mjs
LICENSE.txt
package.json
README.md
tsconfig.json
vsc-extension-quickstart.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="resources/asc_logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="128" zoomAndPan="magnify" viewBox="0 0 96 95.999999" height="128" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><g/><clipPath id="0fd78e7bd8"><path d="M 3.179688 0 L 93.179688 0 L 93.179688 96 L 3.179688 96 Z M 3.179688 0 " clip-rule="nonzero"/></clipPath><clipPath id="b50437b150"><path d="M 1 0.359375 L 2 0.359375 L 2 1.800781 L 1 1.800781 Z M 1 0.359375 " clip-rule="nonzero"/></clipPath><clipPath id="0797148b71"><path d="M 1 0.359375 L 3 0.359375 L 3 1.800781 L 1 1.800781 Z M 1 0.359375 " clip-rule="nonzero"/></clipPath><clipPath id="7946cc0648"><path d="M 2 0.359375 L 3 0.359375 L 3 1.800781 L 2 1.800781 Z M 2 0.359375 " clip-rule="nonzero"/></clipPath><clipPath id="def3f981a5"><rect x="0" width="4" y="0" height="2"/></clipPath></defs><g clip-path="url(#0fd78e7bd8)"><path fill="#040606" d="M 10.300781 50.992188 C 8.808594 49.25 8.019531 47.105469 8.019531 44.800781 C 8.019531 42.136719 9.136719 39.585938 11.082031 37.800781 C 11.511719 37.40625 11.695312 36.804688 11.550781 36.238281 C 11.335938 35.386719 11.230469 34.5 11.230469 33.601562 C 11.230469 27.914062 15.484375 23.136719 21.132812 22.480469 C 21.710938 22.417969 22.210938 22.042969 22.433594 21.511719 C 22.660156 20.976562 22.570312 20.363281 22.210938 19.90625 C 21.347656 18.8125 20.871094 17.425781 20.871094 16 C 20.871094 11.917969 24.792969 8.730469 28.957031 9.820312 C 29.78125 10.03125 30.640625 9.570312 30.898438 8.757812 C 31.964844 5.4375 35.039062 3.199219 38.542969 3.199219 C 42.972656 3.199219 46.574219 6.789062 46.574219 11.199219 C 46.574219 12.082031 47.296875 12.800781 48.179688 12.800781 C 49.066406 12.800781 49.785156 12.082031 49.785156 11.199219 C 49.785156 6.789062 53.386719 3.199219 57.820312 3.199219 C 61.320312 3.199219 64.394531 5.4375 65.460938 8.757812 C 65.71875 9.570312 66.578125 10.039062 67.402344 9.820312 C 71.566406 8.730469 75.492188 11.917969 75.492188 16 C 75.492188 17.425781 75.011719 18.8125 74.148438 19.90625 C 73.789062 20.363281 73.703125 20.976562 73.925781 21.511719 C 74.148438 22.042969 74.648438 22.417969 75.226562 22.480469 C 80.867188 23.136719 85.128906 27.914062 85.128906 33.601562 C 85.128906 34.5 85.023438 35.386719 84.808594 36.238281 C 84.664062 36.804688 84.847656 37.40625 85.28125 37.800781 C 87.226562 39.585938 88.34375 42.136719 88.34375 44.800781 C 88.34375 47.105469 87.550781 49.25 86.058594 50.992188 C 85.777344 51.324219 85.636719 51.757812 85.679688 52.1875 C 85.726562 52.625 85.945312 53.023438 86.289062 53.289062 C 88.613281 55.105469 89.949219 57.84375 89.949219 60.800781 C 89.949219 65.03125 87.113281 68.820312 83.058594 70 C 82.335938 70.210938 81.859375 70.886719 81.902344 71.636719 C 82.324219 78.394531 77.480469 81.9375 73.199219 82.917969 C 72.605469 83.054688 72.132812 83.523438 71.996094 84.117188 C 70.808594 89.230469 66.304688 92.800781 61.03125 92.800781 C 54.832031 92.800781 49.785156 87.773438 49.785156 81.601562 C 49.785156 80.71875 49.066406 80 48.179688 80 C 47.296875 80 46.574219 80.71875 46.574219 81.601562 C 46.574219 87.773438 41.527344 92.800781 35.328125 92.800781 C 30.058594 92.800781 25.550781 89.230469 24.363281 84.117188 C 24.226562 83.523438 23.757812 83.054688 23.160156 82.917969 C 18.878906 81.9375 14.035156 78.394531 14.457031 71.636719 C 14.507812 70.886719 14.023438 70.210938 13.308594 70 C 9.246094 68.820312 6.410156 65.03125 6.410156 60.800781 C 6.410156 57.84375 7.75 55.105469 10.070312 53.289062 C 10.414062 53.023438 10.632812 52.625 10.679688 52.1875 C 10.722656 51.757812 10.585938 51.324219 10.300781 50.992188 Z M 11.21875 72.664062 C 11.320312 79.710938 16.199219 84.210938 21.484375 85.789062 C 23.324219 91.851562 28.882812 96 35.328125 96 C 40.914062 96 45.777344 92.824219 48.179688 88.195312 C 50.582031 92.824219 55.445312 96 61.03125 96 C 67.476562 96 73.035156 91.851562 74.875 85.789062 C 80.160156 84.210938 85.042969 79.710938 85.140625 72.664062 C 89.917969 70.738281 93.160156 66.023438 93.160156 60.800781 C 93.160156 57.382812 91.824219 54.179688 89.453125 51.8125 C 90.816406 49.742188 91.554688 47.304688 91.554688 44.800781 C 91.554688 41.554688 90.3125 38.445312 88.117188 36.105469 C 88.265625 35.28125 88.34375 34.445312 88.34375 33.601562 C 88.34375 27.09375 84 21.511719 77.929688 19.769531 C 78.433594 18.585938 78.703125 17.304688 78.703125 16 C 78.703125 10.707031 74.378906 6.398438 69.0625 6.398438 C 68.707031 6.398438 68.355469 6.417969 68.003906 6.457031 C 66.175781 2.542969 62.25 0 57.820312 0 C 53.734375 0 50.152344 2.179688 48.179688 5.4375 C 46.210938 2.179688 42.625 0 38.542969 0 C 34.109375 0 30.183594 2.542969 28.355469 6.457031 C 28.003906 6.417969 27.652344 6.398438 27.296875 6.398438 C 21.980469 6.398438 17.65625 10.707031 17.65625 16 C 17.65625 17.304688 17.925781 18.585938 18.429688 19.769531 C 12.355469 21.511719 8.019531 27.09375 8.019531 33.601562 C 8.019531 34.445312 8.09375 35.28125 8.238281 36.105469 C 6.046875 38.445312 4.804688 41.554688 4.804688 44.800781 C 4.804688 47.304688 5.546875 49.742188 6.90625 51.8125 C 4.535156 54.179688 3.199219 57.382812 3.199219 60.800781 C 3.199219 66.023438 6.441406 70.738281 11.21875 72.664062 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#040606" d="M 24.082031 40 C 24.082031 35.585938 27.683594 32 32.113281 32 L 64.246094 32 C 68.675781 32 72.277344 35.585938 72.277344 40 L 72.277344 56 C 72.277344 60.414062 68.675781 64 64.246094 64 L 32.113281 64 C 27.683594 64 24.082031 60.414062 24.082031 56 Z M 32.113281 67.199219 L 64.246094 67.199219 C 70.445312 67.199219 75.492188 62.175781 75.492188 56 L 75.492188 40 C 75.492188 33.824219 70.445312 28.800781 64.246094 28.800781 L 32.113281 28.800781 C 25.914062 28.800781 20.871094 33.824219 20.871094 40 L 20.871094 56 C 20.871094 62.175781 25.914062 67.199219 32.113281 67.199219 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 37.40625 57.132812 C 37.71875 57.445312 38.125 57.601562 38.542969 57.601562 C 38.957031 57.601562 39.363281 57.445312 39.675781 57.132812 C 40.304688 56.507812 40.304688 55.492188 39.675781 54.867188 L 32.78125 48 L 39.675781 41.132812 C 40.304688 40.507812 40.304688 39.492188 39.675781 38.867188 C 39.050781 38.242188 38.03125 38.242188 37.40625 38.867188 L 29.371094 46.867188 C 28.746094 47.492188 28.746094 48.507812 29.371094 49.132812 L 37.40625 57.132812 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 56.683594 57.132812 C 56.996094 57.445312 57.40625 57.601562 57.820312 57.601562 C 58.234375 57.601562 58.640625 57.445312 58.953125 57.132812 L 66.988281 49.132812 C 67.613281 48.507812 67.613281 47.492188 66.988281 46.867188 L 58.953125 38.867188 C 58.328125 38.242188 57.3125 38.242188 56.683594 38.867188 C 56.054688 39.492188 56.054688 40.507812 56.683594 41.132812 L 63.578125 48 L 56.683594 54.867188 C 56.054688 55.492188 56.054688 56.507812 56.683594 57.132812 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 44.527344 60.738281 C 44.671875 60.78125 44.824219 60.800781 44.96875 60.800781 C 45.664062 60.800781 46.308594 60.34375 46.511719 59.636719 L 52.9375 37.238281 C 53.179688 36.386719 52.6875 35.507812 51.832031 35.261719 C 50.992188 35.023438 50.09375 35.511719 49.847656 36.363281 L 43.421875 58.761719 C 43.179688 59.613281 43.675781 60.492188 44.527344 60.738281 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 38.542969 73.601562 C 35.972656 73.601562 33.609375 74.304688 31.460938 75.617188 C 28.570312 73.648438 25.871094 73.601562 25.6875 73.601562 C 24.8125 73.601562 24.101562 74.304688 24.089844 75.1875 C 24.082031 76.0625 24.792969 76.78125 25.675781 76.800781 C 25.894531 76.804688 31.097656 76.976562 33.835938 83.792969 C 34.085938 84.417969 34.6875 84.800781 35.328125 84.800781 C 35.527344 84.800781 35.730469 84.761719 35.925781 84.6875 C 36.746094 84.355469 37.148438 83.425781 36.820312 82.605469 C 36.019531 80.605469 35.019531 79.070312 33.972656 77.855469 C 35.378906 77.164062 36.910156 76.800781 38.542969 76.800781 C 39.425781 76.800781 40.148438 76.082031 40.148438 75.199219 C 40.148438 74.320312 39.425781 73.601562 38.542969 73.601562 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 32.101562 17.601562 C 32.265625 17.605469 36.144531 17.707031 38.8125 21.6875 C 39.117188 22.148438 39.625 22.398438 40.148438 22.398438 C 40.453125 22.398438 40.761719 22.3125 41.039062 22.132812 C 41.777344 21.644531 41.980469 20.648438 41.484375 19.914062 C 37.839844 14.460938 32.347656 14.398438 32.113281 14.398438 C 31.230469 14.398438 30.519531 15.113281 30.515625 15.988281 C 30.507812 16.867188 31.222656 17.585938 32.101562 17.601562 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 70.671875 73.601562 C 70.488281 73.601562 67.789062 73.648438 64.898438 75.617188 C 62.75 74.304688 60.386719 73.601562 57.820312 73.601562 C 56.933594 73.601562 56.210938 74.320312 56.210938 75.199219 C 56.210938 76.082031 56.933594 76.800781 57.820312 76.800781 C 59.449219 76.800781 60.980469 77.164062 62.386719 77.855469 C 61.339844 79.070312 60.339844 80.605469 59.539062 82.605469 C 59.210938 83.425781 59.613281 84.355469 60.4375 84.6875 C 60.628906 84.761719 60.832031 84.800781 61.03125 84.800781 C 61.671875 84.800781 62.273438 84.417969 62.527344 83.792969 C 65.253906 76.992188 70.433594 76.804688 70.683594 76.800781 C 71.5625 76.792969 72.277344 76.082031 72.277344 75.199219 C 72.277344 74.320312 71.554688 73.601562 70.671875 73.601562 " fill-opacity="1" fill-rule="nonzero"/><path fill="#040606" d="M 56.210938 22.398438 C 56.734375 22.398438 57.242188 22.148438 57.550781 21.6875 C 60.203125 17.726562 64.0625 17.605469 64.257812 17.601562 C 65.136719 17.59375 65.851562 16.882812 65.851562 16 C 65.851562 15.117188 65.128906 14.398438 64.246094 14.398438 C 64.011719 14.398438 58.523438 14.460938 54.875 19.914062 C 54.378906 20.648438 54.582031 21.644531 55.320312 22.132812 C 55.597656 22.3125 55.90625 22.398438 56.210938 22.398438 " fill-opacity="1" fill-rule="nonzero"/><g transform="matrix(1, 0, 0, 1, 46, 9)"><g clip-path="url(#def3f981a5)"><g clip-path="url(#b50437b150)"><g fill="#000000" fill-opacity="1"><g transform="translate(1.049479, 1.333333)"><g><path d="M -0.015625 -0.734375 L 0.65625 -0.734375 L 0.65625 -0.703125 L 0.375 -0.703125 L 0.375 0 L 0.265625 0 L 0.265625 -0.703125 L -0.015625 -0.703125 Z M -0.015625 -0.734375 "/></g></g></g><g fill="#000000" fill-opacity="1"><g transform="translate(1.672481, 1.333333)"><g><path d="M 0.15625 0 L 0.046875 0 L 0.046875 -0.484375 L 0.15625 -0.484375 Z M 0.09375 -0.515625 C 0.0703125 -0.515625 0.0546875 -0.523438 0.046875 -0.546875 C 0.0351562 -0.554688 0.03125 -0.570312 0.03125 -0.59375 C 0.03125 -0.613281 0.0351562 -0.628906 0.046875 -0.640625 C 0.0546875 -0.648438 0.0703125 -0.65625 0.09375 -0.65625 C 0.113281 -0.65625 0.128906 -0.648438 0.140625 -0.640625 C 0.148438 -0.628906 0.15625 -0.613281 0.15625 -0.59375 C 0.15625 -0.570312 0.148438 -0.554688 0.140625 -0.546875 C 0.128906 -0.523438 0.113281 -0.515625 0.09375 -0.515625 Z M 0.09375 -0.515625 "/></g></g></g></g><g clip-path="url(#0797148b71)"><g fill="#000000" fill-opacity="1"><g transform="translate(1.865482, 1.333333)"><g><path d="M 0.34375 -0.09375 L 0.375 -0.046875 L 0.359375 -0.046875 C 0.347656 -0.0234375 0.332031 -0.015625 0.3125 -0.015625 C 0.289062 -0.00390625 0.273438 0 0.265625 0 C 0.253906 0 0.238281 0 0.21875 0 C 0.207031 0 0.195312 -0.00390625 0.1875 -0.015625 C 0.164062 -0.015625 0.148438 -0.0234375 0.140625 -0.046875 C 0.117188 -0.0546875 0.109375 -0.078125 0.109375 -0.109375 C 0.0976562 -0.128906 0.09375 -0.160156 0.09375 -0.203125 L 0.09375 -0.421875 L 0 -0.421875 L 0 -0.453125 L 0.015625 -0.453125 C 0.0234375 -0.460938 0.0390625 -0.472656 0.0625 -0.484375 C 0.09375 -0.492188 0.113281 -0.507812 0.125 -0.53125 C 0.144531 -0.550781 0.164062 -0.570312 0.1875 -0.59375 L 0.203125 -0.625 L 0.203125 -0.203125 C 0.203125 -0.140625 0.207031 -0.0976562 0.21875 -0.078125 C 0.21875 -0.0664062 0.222656 -0.0546875 0.234375 -0.046875 C 0.242188 -0.0351562 0.253906 -0.03125 0.265625 -0.03125 C 0.273438 -0.03125 0.285156 -0.0351562 0.296875 -0.046875 C 0.304688 -0.0546875 0.316406 -0.0664062 0.328125 -0.078125 Z M 0.34375 -0.09375 "/></g></g></g></g><g clip-path="url(#7946cc0648)"><g fill="#000000" fill-opacity="1"><g transform="translate(2.236483, 1.333333)"><g><path d="M 0.15625 -0.609375 L 0.15625 -0.078125 C 0.15625 -0.078125 0.15625 -0.0664062 0.15625 -0.046875 C 0.15625 -0.0351562 0.15625 -0.0234375 0.15625 -0.015625 L 0.15625 0 L 0.046875 0 L 0.046875 -0.484375 C 0.046875 -0.492188 0.046875 -0.503906 0.046875 -0.515625 C 0.046875 -0.523438 0.046875 -0.539062 0.046875 -0.5625 C 0.046875 -0.582031 0.046875 -0.601562 0.046875 -0.625 C 0.046875 -0.664062 0.0390625 -0.695312 0.03125 -0.71875 C 0.03125 -0.75 0.0234375 -0.769531 0.015625 -0.78125 C 0.00390625 -0.789062 -0.00390625 -0.796875 -0.015625 -0.796875 C -0.0234375 -0.796875 -0.0351562 -0.796875 -0.046875 -0.796875 C -0.0664062 -0.796875 -0.0859375 -0.796875 -0.109375 -0.796875 C -0.128906 -0.804688 -0.144531 -0.8125 -0.15625 -0.8125 L -0.171875 -0.8125 L -0.171875 -0.890625 L -0.15625 -0.890625 C -0.125 -0.878906 -0.09375 -0.867188 -0.0625 -0.859375 C -0.03125 -0.847656 -0.00390625 -0.832031 0.015625 -0.8125 C 0.046875 -0.800781 0.0703125 -0.785156 0.09375 -0.765625 C 0.113281 -0.742188 0.128906 -0.71875 0.140625 -0.6875 C 0.148438 -0.664062 0.15625 -0.644531 0.15625 -0.625 C 0.15625 -0.613281 0.15625 -0.609375 0.15625 -0.609375 Z M 0.15625 -0.609375 "/></g></g></g><g fill="#000000" fill-opacity="1"><g transform="translate(2.438483, 1.333333)"><g><path d="M 0.4375 -0.453125 C 0.457031 -0.429688 0.46875 -0.40625 0.46875 -0.375 C 0.476562 -0.351562 0.484375 -0.332031 0.484375 -0.3125 C 0.484375 -0.289062 0.484375 -0.28125 0.484375 -0.28125 C 0.472656 -0.257812 0.460938 -0.242188 0.453125 -0.234375 C 0.441406 -0.234375 0.429688 -0.234375 0.421875 -0.234375 C 0.410156 -0.234375 0.40625 -0.234375 0.40625 -0.234375 C 0.394531 -0.234375 0.382812 -0.234375 0.375 -0.234375 C 0.363281 -0.234375 0.347656 -0.234375 0.328125 -0.234375 C 0.304688 -0.234375 0.28125 -0.234375 0.25 -0.234375 C 0.226562 -0.234375 0.207031 -0.234375 0.1875 -0.234375 C 0.164062 -0.234375 0.148438 -0.234375 0.140625 -0.234375 C 0.140625 -0.191406 0.15625 -0.15625 0.1875 -0.125 C 0.207031 -0.09375 0.234375 -0.0703125 0.265625 -0.0625 C 0.296875 -0.0507812 0.328125 -0.0507812 0.359375 -0.0625 C 0.367188 -0.0625 0.378906 -0.0664062 0.390625 -0.078125 C 0.398438 -0.0976562 0.40625 -0.113281 0.40625 -0.125 C 0.414062 -0.132812 0.421875 -0.140625 0.421875 -0.140625 L 0.4375 -0.140625 L 0.46875 -0.109375 C 0.40625 -0.0351562 0.335938 0 0.265625 0 C 0.253906 0 0.25 0 0.25 0 L 0.234375 0 C 0.203125 0 0.171875 -0.0078125 0.140625 -0.03125 C 0.117188 -0.0507812 0.0976562 -0.0703125 0.078125 -0.09375 C 0.0664062 -0.113281 0.0546875 -0.132812 0.046875 -0.15625 C 0.0351562 -0.175781 0.03125 -0.191406 0.03125 -0.203125 C 0.03125 -0.222656 0.0351562 -0.234375 0.046875 -0.234375 C 0.0546875 -0.242188 0.0664062 -0.25 0.078125 -0.25 C 0.0859375 -0.257812 0.0976562 -0.265625 0.109375 -0.265625 C 0.117188 -0.273438 0.125 -0.28125 0.125 -0.28125 C 0.132812 -0.28125 0.144531 -0.28125 0.15625 -0.28125 C 0.164062 -0.28125 0.179688 -0.28125 0.203125 -0.28125 C 0.222656 -0.28125 0.242188 -0.28125 0.265625 -0.28125 C 0.296875 -0.28125 0.316406 -0.28125 0.328125 -0.28125 C 0.347656 -0.28125 0.363281 -0.28125 0.375 -0.28125 C 0.382812 -0.351562 0.367188 -0.410156 0.328125 -0.453125 C 0.316406 -0.472656 0.300781 -0.484375 0.28125 -0.484375 C 0.269531 -0.492188 0.257812 -0.5 0.25 -0.5 C 0.226562 -0.5 0.207031 -0.488281 0.1875 -0.46875 C 0.175781 -0.457031 0.164062 -0.441406 0.15625 -0.421875 C 0.15625 -0.398438 0.148438 -0.378906 0.140625 -0.359375 C 0.140625 -0.347656 0.140625 -0.332031 0.140625 -0.3125 C 0.140625 -0.300781 0.140625 -0.296875 0.140625 -0.296875 L 0.125 -0.296875 C 0.101562 -0.285156 0.0820312 -0.28125 0.0625 -0.28125 C 0.0507812 -0.289062 0.0390625 -0.296875 0.03125 -0.296875 C 0.03125 -0.304688 0.0234375 -0.3125 0.015625 -0.3125 L 0.015625 -0.328125 C 0.0234375 -0.378906 0.0390625 -0.414062 0.0625 -0.4375 C 0.0820312 -0.46875 0.101562 -0.488281 0.125 -0.5 C 0.15625 -0.519531 0.179688 -0.53125 0.203125 -0.53125 C 0.222656 -0.539062 0.238281 -0.546875 0.25 -0.546875 L 0.265625 -0.546875 C 0.296875 -0.546875 0.320312 -0.539062 0.34375 -0.53125 C 0.363281 -0.519531 0.378906 -0.503906 0.390625 -0.484375 C 0.410156 -0.472656 0.425781 -0.460938 0.4375 -0.453125 Z M 0.4375 -0.453125 "/></g></g></g></g></g></g></svg>
</file>

<file path="src/test/extension.test.ts">
import * as assert from 'assert';

// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import * as vscode from 'vscode';
// import * as myExtension from '../../extension';

suite('Extension Test Suite', () => {
	vscode.window.showInformationMessage('Start all tests.');

	test('Sample test', () => {
		assert.strictEqual(-1, [1, 2, 3].indexOf(5));
		assert.strictEqual(-1, [1, 2, 3].indexOf(0));
	});
});
</file>

<file path="src/AiderContextViewProvider.ts">
// src/AiderContextViewProvider.ts
import * as vscode from 'vscode';
import * as path from 'path';
import { AiderSessionManager } from './AiderSessionManager';

export class ContextFileItem extends vscode.TreeItem {
    constructor(
        public readonly label: string,
        public readonly filePath: string,
    ) {
        // We pass the URI to the parent class to get the default file icon and label behavior.
        super(vscode.Uri.file(filePath), vscode.TreeItemCollapsibleState.None);
        this.tooltip = this.filePath; // Show full path on hover
    }
}

export class AiderContextViewProvider implements vscode.TreeDataProvider<vscode.TreeItem> {

    // This event emitter is crucial for telling VS Code when to refresh the view
    private _onDidChangeTreeData: vscode.EventEmitter<vscode.TreeItem | undefined | null | void> = new vscode.EventEmitter<vscode.TreeItem | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<vscode.TreeItem | undefined | null | void> = this._onDidChangeTreeData.event;

    refresh(): void {
        this._onDidChangeTreeData.fire();
    }

    getTreeItem(element: vscode.TreeItem): vscode.TreeItem {
        return element;
    }

    getChildren(element?: vscode.TreeItem): Thenable<vscode.TreeItem[]> {
        // Since we have a flat list, we only care about the root level (when element is undefined)
        if (element) {
            return Promise.resolve([]);
        }

        const sessionManager = AiderSessionManager.getInstance();
        const filesMap = sessionManager.getContextFiles();

        if (filesMap.size === 0) {
            return Promise.resolve([new vscode.TreeItem("No files in context.", vscode.TreeItemCollapsibleState.None)]);
        }

        const fileItems = Array.from(filesMap.entries()).map(([filePath, status]) => {
            const fileName = path.basename(filePath);
            const treeItem = new ContextFileItem(fileName, filePath);

            if (status.readOnly) {
                treeItem.description = "(read-only)";
                // Optional: change the icon for extra visual feedback
                treeItem.iconPath = new vscode.ThemeIcon('lock');
            }

            treeItem.command = {
                command: 'vscode.open',
                title: 'Open File',
                arguments: [vscode.Uri.file(filePath), { preview: false }],
            };
            return treeItem;
        });

        return Promise.resolve(fileItems);
    }
}
</file>

<file path="src/AiderSessionManager.ts">
// src/AiderSessionManager.ts
import * as vscode from 'vscode';
import { AiderContextViewProvider } from './AiderContextViewProvider';

export class AiderSessionManager {
    private static _instance: AiderSessionManager;
    private _terminal: vscode.Terminal | undefined;
    private _contextFiles: Map<string, { readOnly: boolean }> = new Map();
    private _statusBarItem: vscode.StatusBarItem;
    private _viewProvider: AiderContextViewProvider | undefined;

    private constructor() {
        this._statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
        this.updateStatusBar();
    }

    public setViewProvider(provider: AiderContextViewProvider) {
        this._viewProvider = provider;
    }

    public getContextFiles(): Map<string, { readOnly: boolean }> {
        return this._contextFiles;
    }

    public static getInstance(): AiderSessionManager {
        if (!AiderSessionManager._instance) {
            AiderSessionManager._instance = new AiderSessionManager();
        }
        return AiderSessionManager._instance;
    }

    private updateStatusBar() {
        const fileCount = this._contextFiles.size;
        if (!this._terminal) {
            this._statusBarItem.text = `$(terminal) Aider: Inactive`;
            this._statusBarItem.tooltip = 'Click to start an Aider session';
            this._statusBarItem.command = 'aider.start'; // Make it clickable!
        } else {
            this._statusBarItem.text = `$(terminal-flame) Aider: ${fileCount} files`;
            this._statusBarItem.tooltip = 'Aider session is active. Click to view terminal.';
            this._statusBarItem.command = 'workbench.action.terminal.focus';
        }
        this._statusBarItem.show();
    }

    public startSession() {
        if (this._terminal) {
            this._terminal.show();
            return;
        }

        const config = vscode.workspace.getConfiguration('aider');
        const executablePath = config.get<string>('executablePath', 'aider');
        this._terminal = vscode.window.createTerminal(`Aider`);
        this._terminal.sendText('aider');
        this._terminal.show();
        this.updateStatusBar();

        // Listen for the terminal being closed by the user
        vscode.window.onDidCloseTerminal(closedTerminal => {
            if (closedTerminal === this._terminal) {
                vscode.window.showInformationMessage('Aider session terminated.');
                this._terminal = undefined;
                this._contextFiles.clear();
                this.updateStatusBar();
            }
        });
    }

    public addFile(filePath: string) {
        if (!this._terminal || this._contextFiles.has(filePath)) {
            return; // Don't add if session isn't running or file is already there
        }
        this.addFiles([filePath]);
    }

    /**
 * Adds multiple files to the Aider context in a single command.
 */
    public addFiles(filePaths: string[], options?: { readOnly?: boolean }) {
        if (!this._terminal || filePaths.length === 0) {
            return;
        }

        const readOnly = !!options?.readOnly;
        const newFiles = filePaths.filter(p => !this._contextFiles.has(p));

        if (newFiles.length === 0) return;

        const quotedPaths = newFiles.map(p => `"${p}"`).join(' ');
        const command = readOnly ? `/read ${quotedPaths}` : `/add ${quotedPaths}`;

        this._terminal.sendText(command);

        newFiles.forEach(p => this._contextFiles.set(p, { readOnly: readOnly }));

        if (this._viewProvider) {
            this._viewProvider.refresh();
        }
    }

    public dropFile(filePath: string) {
        if (!this._terminal || !this._contextFiles.has(filePath)) {
            return;
        }
        this._terminal.sendText(`/drop "${filePath}"`);
        this._contextFiles.delete(filePath); // Use .delete() for Map

        if (this._viewProvider) {
            this._viewProvider.refresh();
        }
    }

    public listFiles() {
        if (!this._terminal) return;
        this._terminal.sendText('/ls');
        this._terminal.show(); // Bring terminal to front
    }

    public clearContext() {
        if (!this._terminal) return;
        this._terminal.sendText('/clear');
        this._terminal.sendText('/drop *');
        this._contextFiles.clear();
        if (this._viewProvider) {
            this._viewProvider.refresh(); // Refresh the view!
        }
        vscode.window.showInformationMessage('Aider context and history cleared.');
        vscode.window.setStatusBarMessage(`Aider context and history cleared.`, 3000);
        this.updateStatusBar();
    }
}
</file>

<file path="src/extension.ts">
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as path from 'path';
import ignore from 'ignore';
import { AiderSessionManager } from './AiderSessionManager';
import { AiderContextViewProvider, ContextFileItem } from './AiderContextViewProvider';

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

	console.log('Aider Smart Context is now active.');

	let startCommand = vscode.commands.registerCommand('aider.start', () => {
		AiderSessionManager.getInstance().startSession();
	});

	const sessionManager = AiderSessionManager.getInstance();
	const aiderContextViewProvider = new AiderContextViewProvider();
	sessionManager.setViewProvider(aiderContextViewProvider);

	vscode.window.registerTreeDataProvider(
		'aider-context-view',
		aiderContextViewProvider
	);

	const onOpenFile = vscode.workspace.onDidOpenTextDocument((document: vscode.TextDocument) => {
		if (document.isUntitled || document.uri.scheme !== 'file') {
			return;
		}

		// Confirm the document is actually visible to the user.
		// This prevents adding files that VS Code or other extensions open in the background.
		const isDocumentVisible = vscode.window.visibleTextEditors.some(
			(editor) => editor.document.uri.toString() === document.uri.toString()
		);

		if (!isDocumentVisible) {
			return; // This is a background event, so we ignore it.
		}

		const config = vscode.workspace.getConfiguration('aider');
		if (config.get<boolean>('autoAddOnOpen')) {
			sessionManager.addFile(document.uri.fsPath);
		}
	});

	const onCloseFile = vscode.workspace.onDidCloseTextDocument((document: vscode.TextDocument) => {
		if (document.isUntitled || document.uri.scheme !== 'file') {
			return;
		}
		const config = vscode.workspace.getConfiguration('aider');
		if (config.get<boolean>('autoDropOnClose')) {
			sessionManager.dropFile(document.uri.fsPath);
		}
	});

	let listFilesCommand = vscode.commands.registerCommand('aider.listFiles', () => {
		sessionManager.listFiles();
	});

	let dropAllFilesCommand = vscode.commands.registerCommand('aider.dropAllFiles', () => {
		sessionManager.clearContext();
	});

	let dropFileCommand = vscode.commands.registerCommand('aider.dropFileFromContext', (item: ContextFileItem) => {
		if (item && item.filePath) {
			const sessionManager = AiderSessionManager.getInstance();
			sessionManager.dropFile(item.filePath);
		}
	});

	let addFromDirCommand = vscode.commands.registerCommand('aider.addAllFromDirectory', async () => {
		const uris = await vscode.window.showOpenDialog({
			canSelectFiles: false,
			canSelectFolders: true,
			canSelectMany: false,
			title: 'Select a directory to add to Aider'
		});

		if (!uris || uris.length === 0) {
			return; // User cancelled the dialog
		}

		const directoryUri = uris[0];
		const workspaceFolder = vscode.workspace.getWorkspaceFolder(directoryUri);

		// --- ROBUSTNESS CHECK ---
		// If the selected directory is not part of an open workspace, we cannot reliably
		// find a .gitignore file or establish a relative path. We must stop and inform the user.
		if (!workspaceFolder) {
			vscode.window.showErrorMessage(
				'The selected folder is not part of the current workspace. Please open the folder or its parent in VS Code to proceed.'
			);
			return;
		}

		// --- .gitignore logic ---
		// This code now safely assumes 'workspaceFolder' is defined.
		const ig = ignore();
		try {
			const gitignoreUri = vscode.Uri.joinPath(workspaceFolder.uri, '.gitignore');
			const gitignoreContent = await vscode.workspace.fs.readFile(gitignoreUri);
			ig.add(Buffer.from(gitignoreContent).toString('utf8'));
		} catch (e) {
			console.log("No .gitignore found in workspace root or failed to read it.");
		}

		// --- Recursive file walking logic (no changes here) ---
		const filesToAdd: string[] = [];

		async function walk(dir: vscode.Uri, wsFolder: vscode.WorkspaceFolder) {
			const entries = await vscode.workspace.fs.readDirectory(dir);
			for (const [name, type] of entries) {
				const currentUri = vscode.Uri.joinPath(dir, name);
				// MODIFIED: Uses the passed-in 'wsFolder' parameter.
				const relativePath = path.posix.relative(wsFolder.uri.path, currentUri.path);

				if (ig.ignores(relativePath)) {
					continue;
				}

				if (type === vscode.FileType.File) {
					filesToAdd.push(currentUri.fsPath);
				} else if (type === vscode.FileType.Directory) {
					await walk(currentUri, wsFolder); // Pass it along in the recursive call.
				}
			}
		}

		await walk(directoryUri, workspaceFolder);

		const sessionManager = AiderSessionManager.getInstance();
		sessionManager.addFiles(filesToAdd);

		vscode.window.showInformationMessage(`Added ${filesToAdd.length} files to the Aider context.`);
	});

	let addActiveReadOnly = vscode.commands.registerCommand('aider.addActiveFileAsReadOnly', () => {
		const editor = vscode.window.activeTextEditor;
		if (editor) {
			sessionManager.addFiles([editor.document.uri.fsPath], { readOnly: true });
		}
	});

	let addExplorerReadOnly = vscode.commands.registerCommand('aider.addFileAsReadOnlyFromExplorer', (uri: vscode.Uri) => {
		if (uri && uri.fsPath) {
			sessionManager.addFiles([uri.fsPath], { readOnly: true });
		}
	});

	let addExplorerFile = vscode.commands.registerCommand('aider.addFileFromExplorer', (uri: vscode.Uri) => {
		if (uri && uri.fsPath) {
			sessionManager.addFiles([uri.fsPath], { readOnly: false });
		}
	});

	context.subscriptions.push(startCommand, onOpenFile, onCloseFile, listFilesCommand, dropFileCommand, dropAllFilesCommand, addFromDirCommand, addActiveReadOnly, addExplorerReadOnly, addExplorerFile);
}



// This method is called when your extension is deactivated
export function deactivate() { }
</file>

<file path=".gitignore">
out
dist
node_modules
.vscode-test/
*.vsix
</file>

<file path=".vscode-test.mjs">
import { defineConfig } from '@vscode/test-cli';

export default defineConfig({
	files: 'out/test/**/*.test.js',
});
</file>

<file path=".vscodeignore">
.vscode/**
.vscode-test/**
src/**
.gitignore
.yarnrc
vsc-extension-quickstart.md
**/tsconfig.json
**/eslint.config.mjs
**/*.map
**/*.ts
**/.vscode-test.*
</file>

<file path="CHANGELOG.md">
# Change Log

All notable changes to the "aider-smart-context" extension will be documented in this file.

Check [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file.

## [Unreleased]

- Initial release
</file>

<file path="eslint.config.mjs">
import typescriptEslint from "@typescript-eslint/eslint-plugin";
import tsParser from "@typescript-eslint/parser";

export default [{
    files: ["**/*.ts"],
}, {
    plugins: {
        "@typescript-eslint": typescriptEslint,
    },

    languageOptions: {
        parser: tsParser,
        ecmaVersion: 2022,
        sourceType: "module",
    },

    rules: {
        "@typescript-eslint/naming-convention": ["warn", {
            selector: "import",
            format: ["camelCase", "PascalCase"],
        }],

        curly: "warn",
        eqeqeq: "warn",
        "no-throw-literal": "warn",
        semi: "warn",
    },
}];
</file>

<file path="LICENSE.txt">
MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="tsconfig.json">
{
	"compilerOptions": {
		"module": "Node16",
		"target": "ES2022",
		"outDir": "out",
		"lib": [
			"ES2022"
		],
		"sourceMap": true,
		"rootDir": "src",
		"strict": true,   /* enable all strict type-checking options */
		/* Additional Checks */
		// "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
		// "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
		// "noUnusedParameters": true,  /* Report errors on unused parameters. */
	}
}
</file>

<file path="vsc-extension-quickstart.md">
# Welcome to your VS Code Extension

## What's in the folder

* This folder contains all of the files necessary for your extension.
* `package.json` - this is the manifest file in which you declare your extension and command.
  * The sample plugin registers a command and defines its title and command name. With this information VS Code can show the command in the command palette. It doesn’t yet need to load the plugin.
* `src/extension.ts` - this is the main file where you will provide the implementation of your command.
  * The file exports one function, `activate`, which is called the very first time your extension is activated (in this case by executing the command). Inside the `activate` function we call `registerCommand`.
  * We pass the function containing the implementation of the command as the second parameter to `registerCommand`.

## Get up and running straight away

* Press `F5` to open a new window with your extension loaded.
* Run your command from the command palette by pressing (`Ctrl+Shift+P` or `Cmd+Shift+P` on Mac) and typing `Hello World`.
* Set breakpoints in your code inside `src/extension.ts` to debug your extension.
* Find output from your extension in the debug console.

## Make changes

* You can relaunch the extension from the debug toolbar after changing code in `src/extension.ts`.
* You can also reload (`Ctrl+R` or `Cmd+R` on Mac) the VS Code window with your extension to load your changes.

## Explore the API

* You can open the full set of our API when you open the file `node_modules/@types/vscode/index.d.ts`.

## Run tests

* Install the [Extension Test Runner](https://marketplace.visualstudio.com/items?itemName=ms-vscode.extension-test-runner)
* Run the "watch" task via the **Tasks: Run Task** command. Make sure this is running, or tests might not be discovered.
* Open the Testing view from the activity bar and click the Run Test" button, or use the hotkey `Ctrl/Cmd + ; A`
* See the output of the test result in the Test Results view.
* Make changes to `src/test/extension.test.ts` or create new test files inside the `test` folder.
  * The provided test runner will only consider files matching the name pattern `**.test.ts`.
  * You can create folders inside the `test` folder to structure your tests any way you want.

## Go further

* [Follow UX guidelines](https://code.visualstudio.com/api/ux-guidelines/overview) to create extensions that seamlessly integrate with VS Code's native interface and patterns.
* Reduce the extension size and improve the startup time by [bundling your extension](https://code.visualstudio.com/api/working-with-extensions/bundling-extension).
* [Publish your extension](https://code.visualstudio.com/api/working-with-extensions/publishing-extension) on the VS Code extension marketplace.
* Automate builds by setting up [Continuous Integration](https://code.visualstudio.com/api/working-with-extensions/continuous-integration).
* Integrate to the [report issue](https://code.visualstudio.com/api/get-started/wrapping-up#issue-reporting) flow to get issue and feature requests reported by users.
</file>

<file path="package.json">
{
  "name": "aider-smart-context",
  "displayName": "Aider Smart Context",
  "description": "Integrates Aider by automatically managing the chat context based on open and closed files.",
  "publisher": "Conflate-AI",
  "version": "0.0.1",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Conflate-AI/Aider-Smart-Context-Vscode-Ext"
  },
  "engines": {
    "vscode": "^1.104.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "aider-view-container",
          "title": "Aider",
          "icon": "resources/asc_logo.svg"
        }
      ]
    },
    "views": {
      "aider-view-container": [
        {
          "id": "aider-context-view",
          "name": "Chat Context",
          "contextualTitle": "Aider"
        }
      ]
    },
    "menus": {
      "view/item/context": [
        {
          "command": "aider.dropFileFromContext",
          "when": "view == aider-context-view",
          "group": "inline"
        }
      ],
      "explorer/context": [
        {
          "command": "aider.addFileAsReadOnlyFromExplorer",
          "when": "resourceScheme == file",
          "group": "2_aider@1"
        },
        {
          "command": "aider.addFileFromExplorer",
          "when": "resourceScheme == file",
          "group": "2_aider@2"
        }
      ]
    },
    "commands": [
      {
        "command": "aider.start",
        "title": "Aider: Start Session",
        "category": "Aider"
      },
      {
        "command": "aider.listFiles",
        "title": "Aider: List Monitored Files",
        "category": "Aider"
      },
      {
        "command": "aider.dropAllFiles",
        "title": "Aider: Drop All Files",
        "category": "Aider"
      },
      {
        "command": "aider.addAllFromDirectory",
        "title": "Aider: Add All Files in Directory...",
        "category": "Aider"
      },
      {
        "command": "aider.dropFileFromContext",
        "title": "Aider: Drop File from Context",
        "category": "Aider"
      },
      {
        "command": "aider.addFileFromExplorer",
        "title": "Aider: Add to Context"
      },
      {
        "command": "aider.addFileAsReadOnlyFromExplorer",
        "title": "Aider: Add as Read-Only"
      }
    ],
    "configuration": {
      "title": "Aider Smart Context",
      "properties": {
        "aider.executablePath": {
          "type": "string",
          "default": "aider",
          "description": "The absolute path to the 'aider' executable."
        },
        "aider.autoAddOnOpen": {
          "type": "boolean",
          "default": true,
          "description": "Automatically add files to the Aider context when they are opened."
        },
        "aider.autoDropOnClose": {
          "type": "boolean",
          "default": true,
          "description": "Automatically drop files from the Aider context when they are closed."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.34.0",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "ignore": "^7.0.5"
  }
}
</file>

<file path="README.md">
# Aider Smart Context for VS Code

**Seamlessly manage your `aider` chat context directly within VS Code, with intelligent automation and a dedicated UI.**

Stop manually typing `/add` and `/drop`. This extension turns `aider` into a fully integrated part of your VS Code workflow, letting you focus on coding with your AI pair programmer, not managing its context.


## Features

✨ **Automatic Context Management**: Files are automatically added to the `aider` chat when you open them and removed when you close them. (Configurable)

🧠 **Dedicated Context View**: A new Aider icon in the Activity Bar opens a dedicated view showing you exactly which files are in the context at all times.

🗑️ **Inline Actions**: Instantly remove a file from the context by clicking the `(x)` icon next to it in the Aider Context View.

📂 **Explorer Integration**: Right-click on any file or folder in the VS Code Explorer to add it to the context.

  * **Add to Context**: Adds the selected file(s).
  * **Add as Read-Only**: Adds the selected file(s) and tells `aider` not to edit them.
  * **Add Directory**: Recursively adds all files in a directory, intelligently respecting your `.gitignore` rules.

⚙️ **Session Management**: Start and stop your `aider` session from the Command Palette, all within a dedicated, integrated VS Code terminal.

-----

## Requirements

You must have the `aider-chat` command-line tool installed and available in your system's PATH.

You can install it via pip:

```bash
pip install aider-chat
```

-----

## Usage

1.  Click the new **Aider icon** in your Activity Bar, or run the **`Aider: Start Session`** command from the Command Palette (`Ctrl+Shift+P`).
2.  An integrated terminal will open and start an `aider` session.
3.  As you open and close files, they will be automatically added or dropped from the context.
4.  Use the **Aider Context View** in the sidebar to monitor and manage the context manually.
5.  Right-click files in the **File Explorer** for more granular control.

### Commands

  * `Aider: Start Session` - Starts the main `aider` session.
  * `Aider: Add All Files in Directory...` - Opens a dialog to select a directory to add.
  * `Aider: Add Active File as Read-Only` - Adds the currently focused file as read-only.
  * `Aider: Drop All Files` - Clears the `aider` context.

-----

## Extension Settings

This extension contributes the following settings to your `settings.json`:

  * `aider.executablePath`: The absolute path to the `aider` executable (defaults to `"aider"`).
  * `aider.autoAddOnOpen`: (`true`/`false`) Automatically add files to the context when they are opened.
  * `aider.autoDropOnClose`: (`true`/`false`) Automatically drop files from the context when they are closed.

-----

## Known Issues

  * Multi-root workspaces are not yet fully supported. The extension will bind to the first workspace folder.

Please report any other issues on the [GitHub Issues page](https://github.com/Conflate-AI/Aider-Smart-Context-Vscode-Ext/issues).


-----

**Enjoy a more productive AI coding experience\!**
</file>

</files>
